{
  "description": "Observatorium is the Schema for the observatoria API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "core.observatorium.io/v1alpha1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "Observatorium"
      ]
    },
    "metadata": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": [
            "object",
            "null"
          ]
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
          "type": [
            "string",
            "null"
          ]
        },
        "creationTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "format": "date-time",
          "type": [
            "string",
            "null"
          ]
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "format": "int64",
          "type": [
            "integer",
            "null"
          ]
        },
        "deletionTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "format": "date-time",
          "type": [
            "string",
            "null"
          ]
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "items": {
            "type": [
              "string",
              "null"
            ]
          },
          "type": [
            "array",
            "null"
          ],
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": [
            "string",
            "null"
          ]
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "format": "int64",
          "type": [
            "integer",
            "null"
          ]
        },
        "labels": {
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": [
            "object",
            "null"
          ]
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "items": {
            "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "fieldsType": {
                "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                "type": [
                  "string",
                  "null"
                ]
              },
              "fieldsV1": {
                "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                "type": [
                  "object",
                  "null"
                ]
              },
              "manager": {
                "description": "Manager is an identifier of the workflow managing these fields.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "operation": {
                "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "subresource": {
                "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "time": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "format": "date-time",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": false
          },
          "type": [
            "array",
            "null"
          ]
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": [
            "string",
            "null"
          ]
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": [
            "string",
            "null"
          ]
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "items": {
            "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
            "properties": {
              "apiVersion": {
                "description": "API version of the referent.",
                "type": "string"
              },
              "blockOwnerDeletion": {
                "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "controller": {
                "description": "If true, this reference points to the managing controller.",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "kind": {
                "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "name": {
                "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                "type": "string"
              },
              "uid": {
                "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                "type": "string"
              }
            },
            "required": [
              "apiVersion",
              "kind",
              "name",
              "uid"
            ],
            "type": [
              "object",
              "null"
            ],
            "x-kubernetes-map-type": "atomic",
            "additionalProperties": false
          },
          "type": [
            "array",
            "null"
          ],
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": [
            "string",
            "null"
          ]
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": [
            "string",
            "null"
          ]
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "spec": {
      "description": "ObservatoriumSpec defines the desired state of Observatorium",
      "properties": {
        "affinity": {
          "description": "Affinity causes all components to be scheduled on nodes with matching rules.",
          "properties": {
            "nodeAffinity": {
              "description": "Describes node affinity scheduling rules for the pod.",
              "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                  "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                  "items": {
                    "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                    "properties": {
                      "preference": {
                        "description": "A node selector term, associated with the corresponding weight.",
                        "properties": {
                          "matchExpressions": {
                            "description": "A list of node selector requirements by node's labels.",
                            "items": {
                              "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                              "properties": {
                                "key": {
                                  "description": "The label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                  "items": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "type": [
                                    "array",
                                    "null"
                                  ]
                                }
                              },
                              "required": [
                                "key",
                                "operator"
                              ],
                              "type": [
                                "object",
                                "null"
                              ],
                              "additionalProperties": false
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "matchFields": {
                            "description": "A list of node selector requirements by node's fields.",
                            "items": {
                              "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                              "properties": {
                                "key": {
                                  "description": "The label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                  "items": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "type": [
                                    "array",
                                    "null"
                                  ]
                                }
                              },
                              "required": [
                                "key",
                                "operator"
                              ],
                              "type": [
                                "object",
                                "null"
                              ],
                              "additionalProperties": false
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          }
                        },
                        "type": "object",
                        "additionalProperties": false
                      },
                      "weight": {
                        "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                        "format": "int32",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "preference",
                      "weight"
                    ],
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": false
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
                  "properties": {
                    "nodeSelectorTerms": {
                      "description": "Required. A list of node selector terms. The terms are ORed.",
                      "items": {
                        "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                        "properties": {
                          "matchExpressions": {
                            "description": "A list of node selector requirements by node's labels.",
                            "items": {
                              "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                              "properties": {
                                "key": {
                                  "description": "The label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                  "items": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "type": [
                                    "array",
                                    "null"
                                  ]
                                }
                              },
                              "required": [
                                "key",
                                "operator"
                              ],
                              "type": [
                                "object",
                                "null"
                              ],
                              "additionalProperties": false
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "matchFields": {
                            "description": "A list of node selector requirements by node's fields.",
                            "items": {
                              "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                              "properties": {
                                "key": {
                                  "description": "The label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                  "items": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "type": [
                                    "array",
                                    "null"
                                  ]
                                }
                              },
                              "required": [
                                "key",
                                "operator"
                              ],
                              "type": [
                                "object",
                                "null"
                              ],
                              "additionalProperties": false
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          }
                        },
                        "type": [
                          "object",
                          "null"
                        ],
                        "additionalProperties": false
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "nodeSelectorTerms"
                  ],
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": false
                }
              },
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": false
            },
            "podAffinity": {
              "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
              "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                  "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                  "items": {
                    "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                    "properties": {
                      "podAffinityTerm": {
                        "description": "Required. A pod affinity term, associated with the corresponding weight.",
                        "properties": {
                          "labelSelector": {
                            "description": "A label query over a set of resources, in this case pods.",
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "items": {
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                      "items": {
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "type": [
                                        "array",
                                        "null"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "additionalProperties": false
                                },
                                "type": [
                                  "array",
                                  "null"
                                ]
                              },
                              "matchLabels": {
                                "additionalProperties": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": [
                                  "object",
                                  "null"
                                ]
                              }
                            },
                            "type": [
                              "object",
                              "null"
                            ],
                            "additionalProperties": false
                          },
                          "namespaces": {
                            "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                            "items": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "topologyKey": {
                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "topologyKey"
                        ],
                        "type": "object",
                        "additionalProperties": false
                      },
                      "weight": {
                        "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                        "format": "int32",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "podAffinityTerm",
                      "weight"
                    ],
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": false
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                  "items": {
                    "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                    "properties": {
                      "labelSelector": {
                        "description": "A label query over a set of resources, in this case pods.",
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                  "items": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "type": [
                                    "array",
                                    "null"
                                  ]
                                }
                              },
                              "required": [
                                "key",
                                "operator"
                              ],
                              "type": [
                                "object",
                                "null"
                              ],
                              "additionalProperties": false
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "matchLabels": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": [
                              "object",
                              "null"
                            ]
                          }
                        },
                        "type": [
                          "object",
                          "null"
                        ],
                        "additionalProperties": false
                      },
                      "namespaces": {
                        "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "type": [
                          "array",
                          "null"
                        ]
                      },
                      "topologyKey": {
                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "topologyKey"
                    ],
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": false
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                }
              },
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": false
            },
            "podAntiAffinity": {
              "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
              "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                  "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                  "items": {
                    "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                    "properties": {
                      "podAffinityTerm": {
                        "description": "Required. A pod affinity term, associated with the corresponding weight.",
                        "properties": {
                          "labelSelector": {
                            "description": "A label query over a set of resources, in this case pods.",
                            "properties": {
                              "matchExpressions": {
                                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "items": {
                                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                  "properties": {
                                    "key": {
                                      "description": "key is the label key that the selector applies to.",
                                      "type": "string"
                                    },
                                    "operator": {
                                      "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                      "type": "string"
                                    },
                                    "values": {
                                      "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                      "items": {
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "type": [
                                        "array",
                                        "null"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "operator"
                                  ],
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "additionalProperties": false
                                },
                                "type": [
                                  "array",
                                  "null"
                                ]
                              },
                              "matchLabels": {
                                "additionalProperties": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "type": [
                                  "object",
                                  "null"
                                ]
                              }
                            },
                            "type": [
                              "object",
                              "null"
                            ],
                            "additionalProperties": false
                          },
                          "namespaces": {
                            "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                            "items": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "topologyKey": {
                            "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "topologyKey"
                        ],
                        "type": "object",
                        "additionalProperties": false
                      },
                      "weight": {
                        "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                        "format": "int32",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "podAffinityTerm",
                      "weight"
                    ],
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": false
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                  "items": {
                    "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                    "properties": {
                      "labelSelector": {
                        "description": "A label query over a set of resources, in this case pods.",
                        "properties": {
                          "matchExpressions": {
                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                            "items": {
                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                              "properties": {
                                "key": {
                                  "description": "key is the label key that the selector applies to.",
                                  "type": "string"
                                },
                                "operator": {
                                  "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                  "type": "string"
                                },
                                "values": {
                                  "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                  "items": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "type": [
                                    "array",
                                    "null"
                                  ]
                                }
                              },
                              "required": [
                                "key",
                                "operator"
                              ],
                              "type": [
                                "object",
                                "null"
                              ],
                              "additionalProperties": false
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "matchLabels": {
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                            "type": [
                              "object",
                              "null"
                            ]
                          }
                        },
                        "type": [
                          "object",
                          "null"
                        ],
                        "additionalProperties": false
                      },
                      "namespaces": {
                        "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "type": [
                          "array",
                          "null"
                        ]
                      },
                      "topologyKey": {
                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "topologyKey"
                    ],
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": false
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                }
              },
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": false
            }
          },
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": false
        },
        "api": {
          "description": "API",
          "properties": {
            "additionalWriteEndpoints": {
              "description": "AdditionalWriteEndpoints is a slice of additional write endpoint for the Observatorium API.",
              "properties": {
                "endpointsConfigSecret": {
                  "description": "Secret name for the endpoints configuration",
                  "type": "string"
                },
                "mountPath": {
                  "description": "Mount path for the secrets",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "mountSecrets": {
                  "description": "Secret list to be mounted",
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                }
              },
              "required": [
                "endpointsConfigSecret"
              ],
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": false
            },
            "image": {
              "description": "API image",
              "type": [
                "string",
                "null"
              ]
            },
            "imagePullPolicy": {
              "description": "API image pull policy",
              "type": [
                "string",
                "null"
              ]
            },
            "rbac": {
              "description": "RBAC is an RBAC configuration for the Observatorium API.",
              "properties": {
                "roleBindings": {
                  "description": "RoleBindings is a slice of Observatorium API role bindings.",
                  "items": {
                    "description": "RBACRoleBinding binds a set of roles to a set of subjects.",
                    "properties": {
                      "name": {
                        "description": "Name is the name of the role binding.",
                        "type": "string"
                      },
                      "roles": {
                        "description": "Roles is a list of roles that will be bound.",
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "type": "array"
                      },
                      "subjects": {
                        "description": "Subjects is a list of subjects who will be given access to the specified roles.",
                        "items": {
                          "description": "Subject represents a subject to which an RBAC role can be bound.",
                          "properties": {
                            "kind": {
                              "description": "SubjectKind is a kind of Observatorium subject.",
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "kind",
                            "name"
                          ],
                          "type": [
                            "object",
                            "null"
                          ],
                          "additionalProperties": false
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "name",
                      "roles",
                      "subjects"
                    ],
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": false
                  },
                  "type": "array"
                },
                "roles": {
                  "description": "Roles is a slice of Observatorium API roles.",
                  "items": {
                    "description": "RBACRole describes a set of permissions to interact with a tenant.",
                    "properties": {
                      "name": {
                        "description": "Name is the name of the role.",
                        "type": "string"
                      },
                      "permissions": {
                        "description": "Permissions is a list of permissions that will be granted.",
                        "items": {
                          "description": "Permission is an Observatorium RBAC permission.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "type": "array"
                      },
                      "resources": {
                        "description": "Resources is a list of resources to which access will be granted.",
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "type": "array"
                      },
                      "tenants": {
                        "description": "Tenants is a list of tenants whose resources will be considered.",
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "name",
                      "permissions",
                      "resources",
                      "tenants"
                    ],
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": false
                  },
                  "type": "array"
                }
              },
              "required": [
                "roleBindings",
                "roles"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "replicas": {
              "description": "Number of API replicas.",
              "format": "int32",
              "type": [
                "integer",
                "null"
              ]
            },
            "resources": {
              "description": "Compute Resources required by this container.",
              "properties": {
                "limits": {
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  },
                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                  "type": [
                    "object",
                    "null"
                  ]
                },
                "requests": {
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  },
                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                  "type": [
                    "object",
                    "null"
                  ]
                }
              },
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": false
            },
            "serviceMonitor": {
              "description": "ServiceMonitor enables servicemonitor.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "tenants": {
              "description": "Tenants is a slice of tenants for the Observatorium API.",
              "items": {
                "description": "APITenant represents a tenant in the Observatorium API.",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "mTLS": {
                    "description": "TenantMTLS represents the mTLS configuration for an Observatorium API tenant.",
                    "properties": {
                      "caKey": {
                        "type": "string"
                      },
                      "configMapName": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "secretName": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "required": [
                      "caKey"
                    ],
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": false
                  },
                  "name": {
                    "type": "string"
                  },
                  "oidc": {
                    "description": "TenantOIDC represents the OIDC configuration for an Observatorium API tenant.",
                    "properties": {
                      "caKey": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "clientID": {
                        "type": "string"
                      },
                      "clientSecret": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "configMapName": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "issuerCAPath": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "issuerURL": {
                        "type": "string"
                      },
                      "redirectURL": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "usernameClaim": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "required": [
                      "clientID",
                      "issuerURL"
                    ],
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": false
                  }
                },
                "required": [
                  "id",
                  "name"
                ],
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": false
              },
              "type": "array"
            },
            "tls": {
              "description": "TLS configuration for the Observatorium API.",
              "properties": {
                "caKey": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "certKey": {
                  "type": "string"
                },
                "configMapName": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "keyKey": {
                  "type": "string"
                },
                "reloadInterval": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "secretName": {
                  "type": "string"
                },
                "serverName": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "required": [
                "certKey",
                "keyKey",
                "secretName"
              ],
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": false
            },
            "version": {
              "description": "Version describes the version of API to use.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "required": [
            "rbac",
            "tenants"
          ],
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": false
        },
        "envVars": {
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          },
          "description": "EnvVars define the common environment variables. EnvVars apply to thanos compact/receive/rule/store components",
          "type": [
            "object",
            "null"
          ]
        },
        "hashrings": {
          "description": "Hashrings describes a list of Hashrings",
          "items": {
            "properties": {
              "hashring": {
                "description": "Thanos Hashring name",
                "type": "string"
              },
              "tenants": {
                "description": "Tenants describes a lists of tenants.",
                "items": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "type": [
                  "array",
                  "null"
                ]
              }
            },
            "required": [
              "hashring"
            ],
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": false
          },
          "type": "array"
        },
        "loki": {
          "description": "Loki",
          "properties": {
            "image": {
              "description": "Loki image",
              "type": "string"
            },
            "imagePullPolicy": {
              "description": "Loki image pull policy",
              "type": [
                "string",
                "null"
              ]
            },
            "replicas": {
              "additionalProperties": {
                "format": "int32",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "description": "Loki replicas per component",
              "type": [
                "object",
                "null"
              ]
            },
            "version": {
              "description": "Version of Loki image to be deployed",
              "type": [
                "string",
                "null"
              ]
            },
            "volumeClaimTemplate": {
              "description": "VolumeClaimTemplate",
              "properties": {
                "spec": {
                  "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
                  "properties": {
                    "accessModes": {
                      "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                      "items": {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "type": [
                        "array",
                        "null"
                      ]
                    },
                    "dataSource": {
                      "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.",
                      "properties": {
                        "apiGroup": {
                          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "kind": {
                          "description": "Kind is the type of resource being referenced",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name is the name of resource being referenced",
                          "type": "string"
                        }
                      },
                      "required": [
                        "kind",
                        "name"
                      ],
                      "type": [
                        "object",
                        "null"
                      ],
                      "additionalProperties": false
                    },
                    "resources": {
                      "description": "Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                      "properties": {
                        "limits": {
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          },
                          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                          "type": [
                            "object",
                            "null"
                          ]
                        },
                        "requests": {
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          },
                          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                          "type": [
                            "object",
                            "null"
                          ]
                        }
                      },
                      "type": [
                        "object",
                        "null"
                      ],
                      "additionalProperties": false
                    },
                    "selector": {
                      "description": "A label query over volumes to consider for binding.",
                      "properties": {
                        "matchExpressions": {
                          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                          "items": {
                            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                            "properties": {
                              "key": {
                                "description": "key is the label key that the selector applies to.",
                                "type": "string"
                              },
                              "operator": {
                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                "type": "string"
                              },
                              "values": {
                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                "items": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "type": [
                                  "array",
                                  "null"
                                ]
                              }
                            },
                            "required": [
                              "key",
                              "operator"
                            ],
                            "type": [
                              "object",
                              "null"
                            ],
                            "additionalProperties": false
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "matchLabels": {
                          "additionalProperties": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                          "type": [
                            "object",
                            "null"
                          ]
                        }
                      },
                      "type": [
                        "object",
                        "null"
                      ],
                      "additionalProperties": false
                    },
                    "storageClassName": {
                      "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "volumeMode": {
                      "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "volumeName": {
                      "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "spec"
              ],
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "image",
            "volumeClaimTemplate"
          ],
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": false
        },
        "nodeSelector": {
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          },
          "description": "NodeSelector causes all components to be scheduled on nodes with matching labels.",
          "type": [
            "object",
            "null"
          ]
        },
        "objectStorageConfig": {
          "description": "Objest Storage Configuration",
          "properties": {
            "loki": {
              "description": "Object Store Config Secret for Loki",
              "properties": {
                "accessKeyIdKey": {
                  "description": "Object Store Config key for AWS_ACCESS_KEY_ID",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "bucketsKey": {
                  "description": "Object Store Config key for S3_BUCKETS",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "endpointKey": {
                  "description": "Object Store Config key for S3_URL",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "regionKey": {
                  "description": "Object Store Config key for S3_REGION",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "secretAccessKeyKey": {
                  "description": "Object Store Config key for AWS_SECRET_ACCESS_KEY",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "secretName": {
                  "description": "Object Store Config Secret Name",
                  "type": "string"
                }
              },
              "required": [
                "secretName"
              ],
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": false
            },
            "thanos": {
              "description": "Object Store Config Secret for Thanos",
              "properties": {
                "key": {
                  "description": "Object Store Config key",
                  "type": "string"
                },
                "name": {
                  "description": "Object Store Config Secret Name",
                  "type": "string"
                },
                "tlsSecretMountPath": {
                  "description": "TLS secret mount path in thanos store/ruler/compact/receiver",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "tlsSecretName": {
                  "description": "TLS secret contains the custom certificate for the object store",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "required": [
                "key",
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            }
          },
          "required": [
            "thanos"
          ],
          "type": "object",
          "additionalProperties": false
        },
        "pullSecret": {
          "description": "Pull secret used to pull the images.",
          "type": [
            "string",
            "null"
          ]
        },
        "securityContext": {
          "description": "Security options the pod should run with.",
          "properties": {
            "allowPrivilegeEscalation": {
              "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN",
              "type": [
                "boolean",
                "null"
              ]
            },
            "capabilities": {
              "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.",
              "properties": {
                "add": {
                  "description": "Added capabilities",
                  "items": {
                    "description": "Capability represent POSIX capabilities type",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "drop": {
                  "description": "Removed capabilities",
                  "items": {
                    "description": "Capability represent POSIX capabilities type",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                }
              },
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": false
            },
            "privileged": {
              "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "procMount": {
              "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.",
              "type": [
                "string",
                "null"
              ]
            },
            "readOnlyRootFilesystem": {
              "description": "Whether this container has a read-only root filesystem. Default is false.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "runAsGroup": {
              "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
              "format": "int64",
              "type": [
                "integer",
                "null"
              ]
            },
            "runAsNonRoot": {
              "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "runAsUser": {
              "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
              "format": "int64",
              "type": [
                "integer",
                "null"
              ]
            },
            "seLinuxOptions": {
              "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
              "properties": {
                "level": {
                  "description": "Level is SELinux level label that applies to the container.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "role": {
                  "description": "Role is a SELinux role label that applies to the container.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "type": {
                  "description": "Type is a SELinux type label that applies to the container.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "user": {
                  "description": "User is a SELinux user label that applies to the container.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": false
            },
            "seccompProfile": {
              "description": "The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.",
              "properties": {
                "localhostProfile": {
                  "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is \"Localhost\".",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "type": {
                  "description": "type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                  "type": "string"
                }
              },
              "required": [
                "type"
              ],
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": false
            },
            "windowsOptions": {
              "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
              "properties": {
                "gmsaCredentialSpec": {
                  "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "gmsaCredentialSpecName": {
                  "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "runAsUserName": {
                  "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": false
            }
          },
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": false
        },
        "thanos": {
          "description": "Thanos Spec",
          "properties": {
            "compact": {
              "description": "Thanos CompactSpec",
              "properties": {
                "deleteDelay": {
                  "description": "Time before a block marked for deletion is deleted from bucket",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "enableDownsampling": {
                  "description": "EnableDownsampling enables downsampling.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "replicas": {
                  "description": "Number of Compact replicas.",
                  "format": "int32",
                  "type": [
                    "integer",
                    "null"
                  ]
                },
                "resources": {
                  "description": "Compute Resources required by this container.",
                  "properties": {
                    "limits": {
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": [
                        "object",
                        "null"
                      ]
                    },
                    "requests": {
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": [
                        "object",
                        "null"
                      ]
                    }
                  },
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": false
                },
                "retentionResolution1h": {
                  "description": "RetentionResolutionRaw",
                  "type": "string"
                },
                "retentionResolution5m": {
                  "description": "RetentionResolutionRaw",
                  "type": "string"
                },
                "retentionResolutionRaw": {
                  "description": "RetentionResolutionRaw",
                  "type": "string"
                },
                "serviceAccountAnnotations": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "description": "Annotations is an unstructured key value map stored with a service account",
                  "type": [
                    "object",
                    "null"
                  ]
                },
                "serviceMonitor": {
                  "description": "ServiceMonitor enables servicemonitor.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "volumeClaimTemplate": {
                  "description": "VolumeClaimTemplate",
                  "properties": {
                    "spec": {
                      "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
                      "properties": {
                        "accessModes": {
                          "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                          "items": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "dataSource": {
                          "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.",
                          "properties": {
                            "apiGroup": {
                              "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "kind": {
                              "description": "Kind is the type of resource being referenced",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name is the name of resource being referenced",
                              "type": "string"
                            }
                          },
                          "required": [
                            "kind",
                            "name"
                          ],
                          "type": [
                            "object",
                            "null"
                          ],
                          "additionalProperties": false
                        },
                        "resources": {
                          "description": "Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                          "properties": {
                            "limits": {
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                              "type": [
                                "object",
                                "null"
                              ]
                            },
                            "requests": {
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                              "type": [
                                "object",
                                "null"
                              ]
                            }
                          },
                          "type": [
                            "object",
                            "null"
                          ],
                          "additionalProperties": false
                        },
                        "selector": {
                          "description": "A label query over volumes to consider for binding.",
                          "properties": {
                            "matchExpressions": {
                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                              "items": {
                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                "properties": {
                                  "key": {
                                    "description": "key is the label key that the selector applies to.",
                                    "type": "string"
                                  },
                                  "operator": {
                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                    "type": "string"
                                  },
                                  "values": {
                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                    "items": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "type": [
                                      "array",
                                      "null"
                                    ]
                                  }
                                },
                                "required": [
                                  "key",
                                  "operator"
                                ],
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "additionalProperties": false
                              },
                              "type": [
                                "array",
                                "null"
                              ]
                            },
                            "matchLabels": {
                              "additionalProperties": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                              "type": [
                                "object",
                                "null"
                              ]
                            }
                          },
                          "type": [
                            "object",
                            "null"
                          ],
                          "additionalProperties": false
                        },
                        "storageClassName": {
                          "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "volumeMode": {
                          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "volumeName": {
                          "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "spec"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "retentionResolution1h",
                "retentionResolution5m",
                "retentionResolutionRaw",
                "volumeClaimTemplate"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "image": {
              "description": "Thanos image",
              "type": [
                "string",
                "null"
              ]
            },
            "imagePullPolicy": {
              "description": "Thanos image pull policy",
              "type": [
                "string",
                "null"
              ]
            },
            "query": {
              "description": "Query",
              "properties": {
                "lookbackDelta": {
                  "description": "The maximum lookback duration for retrieving metrics during expression evaluations.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "replicas": {
                  "description": "Number of Query replicas.",
                  "format": "int32",
                  "type": [
                    "integer",
                    "null"
                  ]
                },
                "resources": {
                  "description": "Compute Resources required by this container.",
                  "properties": {
                    "limits": {
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": [
                        "object",
                        "null"
                      ]
                    },
                    "requests": {
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": [
                        "object",
                        "null"
                      ]
                    }
                  },
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": false
                },
                "serviceAccountAnnotations": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "description": "Annotations is an unstructured key value map stored with a service account",
                  "type": [
                    "object",
                    "null"
                  ]
                },
                "serviceMonitor": {
                  "description": "ServiceMonitor enables servicemonitor.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                }
              },
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": false
            },
            "queryFrontend": {
              "description": "Thanos QueryFrontend",
              "properties": {
                "cache": {
                  "description": "Memcached spec for QueryFrontend",
                  "properties": {
                    "connectionLimit": {
                      "description": "Max simultaneous connections",
                      "format": "int32",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "exporterImage": {
                      "description": "Memcached Prometheus Exporter image",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "exporterImagePullPolicy": {
                      "description": "Memcached Prometheus Exporter image image pull policy",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "exporterResources": {
                      "description": "Compute Resources required by this container.",
                      "properties": {
                        "limits": {
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          },
                          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                          "type": [
                            "object",
                            "null"
                          ]
                        },
                        "requests": {
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          },
                          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                          "type": [
                            "object",
                            "null"
                          ]
                        }
                      },
                      "type": [
                        "object",
                        "null"
                      ],
                      "additionalProperties": false
                    },
                    "exporterVersion": {
                      "description": "Version of Memcached Prometheus Exporter image to be deployed.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "image": {
                      "description": "Memcached image",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "imagePullPolicy": {
                      "description": "Memcached image pull policy",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "maxItemSize": {
                      "description": "Max item size (default: 1m, min: 1k, max: 1024m)",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "memoryLimitMb": {
                      "description": "Memory limit of Memcached in megabytes.",
                      "format": "int32",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "replicas": {
                      "description": "Number of Memcached replicas.",
                      "format": "int32",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "resources": {
                      "description": "Compute Resources required by this container.",
                      "properties": {
                        "limits": {
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          },
                          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                          "type": [
                            "object",
                            "null"
                          ]
                        },
                        "requests": {
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          },
                          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                          "type": [
                            "object",
                            "null"
                          ]
                        }
                      },
                      "type": [
                        "object",
                        "null"
                      ],
                      "additionalProperties": false
                    },
                    "serviceMonitor": {
                      "description": "ServiceMonitor enables servicemonitor.",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "version": {
                      "description": "Version of Memcached image to be deployed.",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": false
                },
                "replicas": {
                  "description": "Number of Query Frontend replicas.",
                  "format": "int32",
                  "type": [
                    "integer",
                    "null"
                  ]
                },
                "resources": {
                  "description": "Compute Resources required by this container.",
                  "properties": {
                    "limits": {
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": [
                        "object",
                        "null"
                      ]
                    },
                    "requests": {
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": [
                        "object",
                        "null"
                      ]
                    }
                  },
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": false
                },
                "serviceMonitor": {
                  "description": "ServiceMonitor enables servicemonitor.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                }
              },
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": false
            },
            "receiveController": {
              "description": "Thanos Receive Controller Spec",
              "properties": {
                "image": {
                  "description": "Receive Controller image",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "imagePullPolicy": {
                  "description": "Receive image pull policy",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "resources": {
                  "description": "Compute Resources required by this container.",
                  "properties": {
                    "limits": {
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": [
                        "object",
                        "null"
                      ]
                    },
                    "requests": {
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": [
                        "object",
                        "null"
                      ]
                    }
                  },
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": false
                },
                "serviceMonitor": {
                  "description": "ServiceMonitor enables servicemonitor.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "version": {
                  "description": "Version describes the version of Thanos receive controller to use.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": false
            },
            "receivers": {
              "description": "Thanos ThanosPersistentSpec",
              "properties": {
                "replicas": {
                  "description": "Number of Receiver replicas.",
                  "format": "int32",
                  "type": [
                    "integer",
                    "null"
                  ]
                },
                "replicationFactor": {
                  "description": "ReplicationFactor defines the number of copies of every time-series",
                  "format": "int32",
                  "type": [
                    "integer",
                    "null"
                  ]
                },
                "resources": {
                  "description": "Compute Resources required by this container.",
                  "properties": {
                    "limits": {
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": [
                        "object",
                        "null"
                      ]
                    },
                    "requests": {
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": [
                        "object",
                        "null"
                      ]
                    }
                  },
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": false
                },
                "retention": {
                  "description": "How long to retain raw samples on local storage",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "serviceAccountAnnotations": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "description": "Annotations is an unstructured key value map stored with a service account",
                  "type": [
                    "object",
                    "null"
                  ]
                },
                "serviceMonitor": {
                  "description": "ServiceMonitor enables servicemonitor.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "volumeClaimTemplate": {
                  "description": "VolumeClaimTemplate",
                  "properties": {
                    "spec": {
                      "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
                      "properties": {
                        "accessModes": {
                          "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                          "items": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "dataSource": {
                          "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.",
                          "properties": {
                            "apiGroup": {
                              "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "kind": {
                              "description": "Kind is the type of resource being referenced",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name is the name of resource being referenced",
                              "type": "string"
                            }
                          },
                          "required": [
                            "kind",
                            "name"
                          ],
                          "type": [
                            "object",
                            "null"
                          ],
                          "additionalProperties": false
                        },
                        "resources": {
                          "description": "Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                          "properties": {
                            "limits": {
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                              "type": [
                                "object",
                                "null"
                              ]
                            },
                            "requests": {
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                              "type": [
                                "object",
                                "null"
                              ]
                            }
                          },
                          "type": [
                            "object",
                            "null"
                          ],
                          "additionalProperties": false
                        },
                        "selector": {
                          "description": "A label query over volumes to consider for binding.",
                          "properties": {
                            "matchExpressions": {
                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                              "items": {
                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                "properties": {
                                  "key": {
                                    "description": "key is the label key that the selector applies to.",
                                    "type": "string"
                                  },
                                  "operator": {
                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                    "type": "string"
                                  },
                                  "values": {
                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                    "items": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "type": [
                                      "array",
                                      "null"
                                    ]
                                  }
                                },
                                "required": [
                                  "key",
                                  "operator"
                                ],
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "additionalProperties": false
                              },
                              "type": [
                                "array",
                                "null"
                              ]
                            },
                            "matchLabels": {
                              "additionalProperties": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                              "type": [
                                "object",
                                "null"
                              ]
                            }
                          },
                          "type": [
                            "object",
                            "null"
                          ],
                          "additionalProperties": false
                        },
                        "storageClassName": {
                          "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "volumeMode": {
                          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "volumeName": {
                          "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "spec"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "volumeClaimTemplate"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "rule": {
              "description": "Thanos RulerSpec",
              "properties": {
                "alertmanagerConfigFile": {
                  "description": "AlertmanagerConfigFile",
                  "properties": {
                    "key": {
                      "description": "Alertmanager ConfigMap key",
                      "type": "string"
                    },
                    "name": {
                      "description": "Alertmanager ConfigMap Name",
                      "type": "string"
                    }
                  },
                  "required": [
                    "key",
                    "name"
                  ],
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": false
                },
                "alertmanagerURLs": {
                  "description": "AlertmanagerURLs",
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "blockDuration": {
                  "description": "Block duration for TSDB block",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "evalInterval": {
                  "description": "Evaluation interval",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "extraVolumeMounts": {
                  "description": "ExtraVolumeMounts",
                  "items": {
                    "properties": {
                      "key": {
                        "description": "File name for the mount",
                        "type": "string"
                      },
                      "mountPath": {
                        "description": "Volume mount path in the pod",
                        "type": "string"
                      },
                      "name": {
                        "description": "Resource name for the volume mount source",
                        "type": "string"
                      },
                      "type": {
                        "description": "Voume mount type, configMap or secret",
                        "type": "string"
                      }
                    },
                    "required": [
                      "key",
                      "mountPath",
                      "name",
                      "type"
                    ],
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": false
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "reloaderImage": {
                  "description": "ReloaderImage is an image of configmap reloader",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "reloaderImagePullPolicy": {
                  "description": "ReloaderImage image pull policy",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "reloaderResources": {
                  "description": "Compute Resources required by this container.",
                  "properties": {
                    "limits": {
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": [
                        "object",
                        "null"
                      ]
                    },
                    "requests": {
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": [
                        "object",
                        "null"
                      ]
                    }
                  },
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": false
                },
                "replicas": {
                  "description": "Number of Rule replicas.",
                  "format": "int32",
                  "type": [
                    "integer",
                    "null"
                  ]
                },
                "resources": {
                  "description": "Compute Resources required by this container.",
                  "properties": {
                    "limits": {
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": [
                        "object",
                        "null"
                      ]
                    },
                    "requests": {
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": [
                        "object",
                        "null"
                      ]
                    }
                  },
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": false
                },
                "retention": {
                  "description": "Block retention time on local disk",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "rulesConfig": {
                  "description": "RulesConfig configures rules from the configmaps",
                  "items": {
                    "properties": {
                      "key": {
                        "description": "Rule ConfigMap key",
                        "type": "string"
                      },
                      "name": {
                        "description": "Rule ConfigMap Name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "key",
                      "name"
                    ],
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": false
                  },
                  "type": [
                    "array",
                    "null"
                  ]
                },
                "serviceAccountAnnotations": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "description": "Annotations is an unstructured key value map stored with a service account",
                  "type": [
                    "object",
                    "null"
                  ]
                },
                "serviceMonitor": {
                  "description": "ServiceMonitor enables servicemonitor.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "volumeClaimTemplate": {
                  "description": "VolumeClaimTemplate",
                  "properties": {
                    "spec": {
                      "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
                      "properties": {
                        "accessModes": {
                          "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                          "items": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "dataSource": {
                          "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.",
                          "properties": {
                            "apiGroup": {
                              "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "kind": {
                              "description": "Kind is the type of resource being referenced",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name is the name of resource being referenced",
                              "type": "string"
                            }
                          },
                          "required": [
                            "kind",
                            "name"
                          ],
                          "type": [
                            "object",
                            "null"
                          ],
                          "additionalProperties": false
                        },
                        "resources": {
                          "description": "Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                          "properties": {
                            "limits": {
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                              "type": [
                                "object",
                                "null"
                              ]
                            },
                            "requests": {
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                              "type": [
                                "object",
                                "null"
                              ]
                            }
                          },
                          "type": [
                            "object",
                            "null"
                          ],
                          "additionalProperties": false
                        },
                        "selector": {
                          "description": "A label query over volumes to consider for binding.",
                          "properties": {
                            "matchExpressions": {
                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                              "items": {
                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                "properties": {
                                  "key": {
                                    "description": "key is the label key that the selector applies to.",
                                    "type": "string"
                                  },
                                  "operator": {
                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                    "type": "string"
                                  },
                                  "values": {
                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                    "items": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "type": [
                                      "array",
                                      "null"
                                    ]
                                  }
                                },
                                "required": [
                                  "key",
                                  "operator"
                                ],
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "additionalProperties": false
                              },
                              "type": [
                                "array",
                                "null"
                              ]
                            },
                            "matchLabels": {
                              "additionalProperties": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                              "type": [
                                "object",
                                "null"
                              ]
                            }
                          },
                          "type": [
                            "object",
                            "null"
                          ],
                          "additionalProperties": false
                        },
                        "storageClassName": {
                          "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "volumeMode": {
                          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "volumeName": {
                          "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "spec"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "volumeClaimTemplate"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "store": {
              "description": "Thanos StoreSpec",
              "properties": {
                "cache": {
                  "description": "Memcached spec for Store",
                  "properties": {
                    "connectionLimit": {
                      "description": "Max simultaneous connections",
                      "format": "int32",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "exporterImage": {
                      "description": "Memcached Prometheus Exporter image",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "exporterImagePullPolicy": {
                      "description": "Memcached Prometheus Exporter image image pull policy",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "exporterResources": {
                      "description": "Compute Resources required by this container.",
                      "properties": {
                        "limits": {
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          },
                          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                          "type": [
                            "object",
                            "null"
                          ]
                        },
                        "requests": {
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          },
                          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                          "type": [
                            "object",
                            "null"
                          ]
                        }
                      },
                      "type": [
                        "object",
                        "null"
                      ],
                      "additionalProperties": false
                    },
                    "exporterVersion": {
                      "description": "Version of Memcached Prometheus Exporter image to be deployed.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "image": {
                      "description": "Memcached image",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "imagePullPolicy": {
                      "description": "Memcached image pull policy",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "maxItemSize": {
                      "description": "Max item size (default: 1m, min: 1k, max: 1024m)",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "memoryLimitMb": {
                      "description": "Memory limit of Memcached in megabytes.",
                      "format": "int32",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "replicas": {
                      "description": "Number of Memcached replicas.",
                      "format": "int32",
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "resources": {
                      "description": "Compute Resources required by this container.",
                      "properties": {
                        "limits": {
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          },
                          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                          "type": [
                            "object",
                            "null"
                          ]
                        },
                        "requests": {
                          "additionalProperties": {
                            "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                            "x-kubernetes-int-or-string": true
                          },
                          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                          "type": [
                            "object",
                            "null"
                          ]
                        }
                      },
                      "type": [
                        "object",
                        "null"
                      ],
                      "additionalProperties": false
                    },
                    "serviceMonitor": {
                      "description": "ServiceMonitor enables servicemonitor.",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "version": {
                      "description": "Version of Memcached image to be deployed.",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": false
                },
                "resources": {
                  "description": "Compute Resources required by this container.",
                  "properties": {
                    "limits": {
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": [
                        "object",
                        "null"
                      ]
                    },
                    "requests": {
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      },
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                      "type": [
                        "object",
                        "null"
                      ]
                    }
                  },
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": false
                },
                "serviceAccountAnnotations": {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "description": "Annotations is an unstructured key value map stored with a service account",
                  "type": [
                    "object",
                    "null"
                  ]
                },
                "serviceMonitor": {
                  "description": "ServiceMonitor enables servicemonitor.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "shards": {
                  "format": "int32",
                  "type": [
                    "integer",
                    "null"
                  ]
                },
                "volumeClaimTemplate": {
                  "description": "VolumeClaimTemplate",
                  "properties": {
                    "spec": {
                      "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
                      "properties": {
                        "accessModes": {
                          "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                          "items": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "dataSource": {
                          "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.",
                          "properties": {
                            "apiGroup": {
                              "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "kind": {
                              "description": "Kind is the type of resource being referenced",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name is the name of resource being referenced",
                              "type": "string"
                            }
                          },
                          "required": [
                            "kind",
                            "name"
                          ],
                          "type": [
                            "object",
                            "null"
                          ],
                          "additionalProperties": false
                        },
                        "resources": {
                          "description": "Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                          "properties": {
                            "limits": {
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                              "type": [
                                "object",
                                "null"
                              ]
                            },
                            "requests": {
                              "additionalProperties": {
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                              "type": [
                                "object",
                                "null"
                              ]
                            }
                          },
                          "type": [
                            "object",
                            "null"
                          ],
                          "additionalProperties": false
                        },
                        "selector": {
                          "description": "A label query over volumes to consider for binding.",
                          "properties": {
                            "matchExpressions": {
                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                              "items": {
                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                "properties": {
                                  "key": {
                                    "description": "key is the label key that the selector applies to.",
                                    "type": "string"
                                  },
                                  "operator": {
                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                    "type": "string"
                                  },
                                  "values": {
                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                    "items": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "type": [
                                      "array",
                                      "null"
                                    ]
                                  }
                                },
                                "required": [
                                  "key",
                                  "operator"
                                ],
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "additionalProperties": false
                              },
                              "type": [
                                "array",
                                "null"
                              ]
                            },
                            "matchLabels": {
                              "additionalProperties": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                              "type": [
                                "object",
                                "null"
                              ]
                            }
                          },
                          "type": [
                            "object",
                            "null"
                          ],
                          "additionalProperties": false
                        },
                        "storageClassName": {
                          "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "volumeMode": {
                          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "volumeName": {
                          "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "type": "object",
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "spec"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "required": [
                "volumeClaimTemplate"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "version": {
              "description": "Version of Thanos image to be deployed.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "required": [
            "compact",
            "receivers",
            "rule",
            "store"
          ],
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": false
        },
        "tolerations": {
          "description": "Tolerations causes all components to tolerate specified taints.",
          "items": {
            "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
            "properties": {
              "effect": {
                "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "key": {
                "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "operator": {
                "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "tolerationSeconds": {
                "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                "format": "int64",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "value": {
                "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": false
          },
          "type": [
            "array",
            "null"
          ]
        }
      },
      "required": [
        "hashrings",
        "objectStorageConfig"
      ],
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    },
    "status": {
      "description": "ObservatoriumStatus defines the observed state of Observatorium",
      "properties": {
        "conditions": {
          "description": "Represents the status of Observatorium",
          "items": {
            "properties": {
              "currentStatus": {
                "type": "string"
              },
              "lastTransitionTime": {
                "format": "date-time",
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "currentStatus",
              "lastTransitionTime",
              "name"
            ],
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": false
          },
          "type": [
            "array",
            "null"
          ]
        }
      },
      "type": [
        "object",
        "null"
      ],
      "additionalProperties": false
    }
  },
  "type": "object",
  "x-kubernetes-group-version-kind": [
    {
      "group": "core.observatorium.io",
      "kind": "Observatorium",
      "version": "v1alpha1"
    }
  ],
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}