{
  "description": "ManifestWorkList is a list of ManifestWork",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "work.open-cluster-management.io/v1"
      ]
    },
    "items": {
      "description": "List of manifestworks. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
      "items": {
        "description": "ManifestWork represents a manifests workload that hub wants to deploy on the managed cluster. A manifest workload is defined as a set of Kubernetes resources. ManifestWork must be created in the cluster namespace on the hub, so that agent on the corresponding managed cluster can access this resource and deploy on the managed cluster.",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "work.open-cluster-management.io/v1"
            ]
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "ManifestWork"
            ]
          },
          "metadata": {
            "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
            "properties": {
              "annotations": {
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                "type": [
                  "object",
                  "null"
                ]
              },
              "clusterName": {
                "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "creationTimestamp": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "format": "date-time",
                "type": [
                  "string",
                  "null"
                ]
              },
              "deletionGracePeriodSeconds": {
                "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
                "format": "int64",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "deletionTimestamp": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "format": "date-time",
                "type": [
                  "string",
                  "null"
                ]
              },
              "finalizers": {
                "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                "items": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "type": [
                  "array",
                  "null"
                ],
                "x-kubernetes-patch-strategy": "merge"
              },
              "generateName": {
                "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                "type": [
                  "string",
                  "null"
                ]
              },
              "generation": {
                "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
                "format": "int64",
                "type": [
                  "integer",
                  "null"
                ]
              },
              "labels": {
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                "type": [
                  "object",
                  "null"
                ]
              },
              "managedFields": {
                "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
                "items": {
                  "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "fieldsType": {
                      "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "fieldsV1": {
                      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                      "type": [
                        "object",
                        "null"
                      ]
                    },
                    "manager": {
                      "description": "Manager is an identifier of the workflow managing these fields.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "operation": {
                      "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "subresource": {
                      "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "time": {
                      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                      "format": "date-time",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "type": [
                    "object",
                    "null"
                  ]
                },
                "type": [
                  "array",
                  "null"
                ]
              },
              "name": {
                "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                "type": [
                  "string",
                  "null"
                ]
              },
              "namespace": {
                "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
                "type": [
                  "string",
                  "null"
                ]
              },
              "ownerReferences": {
                "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                "items": {
                  "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                  "properties": {
                    "apiVersion": {
                      "description": "API version of the referent.",
                      "type": "string"
                    },
                    "blockOwnerDeletion": {
                      "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "controller": {
                      "description": "If true, this reference points to the managing controller.",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "kind": {
                      "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                      "type": "string"
                    },
                    "uid": {
                      "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                      "type": "string"
                    }
                  },
                  "required": [
                    "apiVersion",
                    "kind",
                    "name",
                    "uid"
                  ],
                  "type": [
                    "object",
                    "null"
                  ],
                  "x-kubernetes-map-type": "atomic"
                },
                "type": [
                  "array",
                  "null"
                ],
                "x-kubernetes-patch-merge-key": "uid",
                "x-kubernetes-patch-strategy": "merge"
              },
              "resourceVersion": {
                "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                "type": [
                  "string",
                  "null"
                ]
              },
              "selfLink": {
                "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "uid": {
                "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "type": [
              "object",
              "null"
            ]
          },
          "spec": {
            "description": "Spec represents a desired configuration of work to be deployed on the managed cluster.",
            "properties": {
              "deleteOption": {
                "description": "DeleteOption represents deletion strategy when the manifestwork is deleted. Foreground deletion strategy is applied to all the resource in this manifestwork if it is not set.",
                "properties": {
                  "propagationPolicy": {
                    "description": "propagationPolicy can be Foreground, Orphan or SelectivelyOrphan SelectivelyOrphan should be rarely used.  It is provided for cases where particular resources is transfering ownership from one ManifestWork to another or another management unit. Setting this value will allow a flow like 1. create manifestwork/2 to manage foo 2. update manifestwork/1 to selectively orphan foo 3. remove foo from manifestwork/1 without impacting continuity because manifestwork/2 adopts it.",
                    "enum": [
                      "Foreground",
                      "Orphan",
                      "SelectivelyOrphan"
                    ],
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "selectivelyOrphans": {
                    "description": "selectivelyOrphan represents a list of resources following orphan deletion stratecy",
                    "properties": {
                      "orphaningRules": {
                        "description": "orphaningRules defines a slice of orphaningrule. Each orphaningrule identifies a single resource included in this manifestwork",
                        "items": {
                          "description": "OrphaningRule identifies a single resource included in this manifestwork to be orphaned",
                          "properties": {
                            "group": {
                              "description": "Group is the API Group of the Kubernetes resource, empty string indicates it is in core group.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "name": {
                              "description": "Name is the name of the Kubernetes resource.",
                              "type": "string"
                            },
                            "namespace": {
                              "description": "Name is the namespace of the Kubernetes resource, empty string indicates it is a cluster scoped resource.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "resource": {
                              "description": "Resource is the resource name of the Kubernetes resource.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "resource"
                          ],
                          "type": [
                            "object",
                            "null"
                          ]
                        },
                        "type": [
                          "array",
                          "null"
                        ]
                      }
                    },
                    "type": [
                      "object",
                      "null"
                    ]
                  }
                },
                "type": [
                  "object",
                  "null"
                ]
              },
              "manifestConfigs": {
                "description": "ManifestConfigs represents the configurations of manifests defined in workload field.",
                "items": {
                  "description": "ManifestConfigOption represents the configurations of a manifest defined in workload field.",
                  "properties": {
                    "feedbackRules": {
                      "description": "FeedbackRules defines what resource status field should be returned.",
                      "items": {
                        "properties": {
                          "jsonPaths": {
                            "description": "JsonPaths defines the json path under status field to be synced.",
                            "items": {
                              "properties": {
                                "name": {
                                  "description": "Name represents the alias name for this field",
                                  "type": "string"
                                },
                                "path": {
                                  "description": "Path represents the json path of the field under status. The path must point to a field with single value in the type of integer, bool or string. If the path points to a non-existing field, no value will be returned. If the path points to a structure, map or slice, no value will be returned and the status conddition of StatusFeedBackSynced will be set as false. Ref to https://kubernetes.io/docs/reference/kubectl/jsonpath/ on how to write a jsonPath.",
                                  "type": "string"
                                },
                                "version": {
                                  "description": "Version is the version of the Kubernetes resource. If it is not specified, the resource with the semantically latest version is used to resolve the path.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                }
                              },
                              "required": [
                                "name",
                                "path"
                              ],
                              "type": [
                                "object",
                                "null"
                              ]
                            },
                            "type": [
                              "array",
                              "null"
                            ]
                          },
                          "type": {
                            "description": "Type defines the option of how status can be returned. It can be jsonPaths or wellKnownStatus. If the type is JSONPaths, user should specify the jsonPaths field If the type is WellKnownStatus, certain common fields of status defined by a rule only for types in in k8s.io/api and open-cluster-management/api will be reported, If these status fields do not exist, no values will be reported.",
                            "enum": [
                              "WellKnownStatus",
                              "JSONPaths"
                            ],
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": [
                          "object",
                          "null"
                        ]
                      },
                      "type": "array"
                    },
                    "resourceIdentifier": {
                      "description": "ResourceIdentifier represents the group, resource, name and namespace of a resoure. iff this refers to a resource not created by this manifest work, the related rules will not be executed.",
                      "properties": {
                        "group": {
                          "description": "Group is the API Group of the Kubernetes resource, empty string indicates it is in core group.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "name": {
                          "description": "Name is the name of the Kubernetes resource.",
                          "type": "string"
                        },
                        "namespace": {
                          "description": "Name is the namespace of the Kubernetes resource, empty string indicates it is a cluster scoped resource.",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "resource": {
                          "description": "Resource is the resource name of the Kubernetes resource.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "resource"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "feedbackRules",
                    "resourceIdentifier"
                  ],
                  "type": [
                    "object",
                    "null"
                  ]
                },
                "type": [
                  "array",
                  "null"
                ]
              },
              "workload": {
                "description": "Workload represents the manifest workload to be deployed on a managed cluster.",
                "properties": {
                  "manifests": {
                    "description": "Manifests represents a list of kuberenetes resources to be deployed on a managed cluster.",
                    "items": {
                      "description": "Manifest represents a resource to be deployed on managed cluster.",
                      "x-kubernetes-embedded-resource": true,
                      "x-kubernetes-preserve-unknown-fields": true
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  }
                },
                "type": [
                  "object",
                  "null"
                ]
              }
            },
            "type": [
              "object",
              "null"
            ]
          },
          "status": {
            "description": "Status represents the current status of work.",
            "properties": {
              "conditions": {
                "description": "Conditions contains the different condition statuses for this work. Valid condition types are: 1. Applied represents workload in ManifestWork is applied successfully on managed cluster. 2. Progressing represents workload in ManifestWork is being applied on managed cluster. 3. Available represents workload in ManifestWork exists on the managed cluster. 4. Degraded represents the current state of workload does not match the desired state for a certain period.",
                "items": {
                  "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }",
                  "properties": {
                    "lastTransitionTime": {
                      "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "message": {
                      "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                      "maxLength": 32768,
                      "type": "string"
                    },
                    "observedGeneration": {
                      "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                      "format": "int64",
                      "minimum": 0,
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "reason": {
                      "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                      "maxLength": 1024,
                      "minLength": 1,
                      "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                      "type": "string"
                    },
                    "status": {
                      "description": "status of the condition, one of True, False, Unknown.",
                      "enum": [
                        "True",
                        "False",
                        "Unknown"
                      ],
                      "type": "string"
                    },
                    "type": {
                      "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                      "maxLength": 316,
                      "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                      "type": "string"
                    }
                  },
                  "required": [
                    "lastTransitionTime",
                    "message",
                    "reason",
                    "status",
                    "type"
                  ],
                  "type": [
                    "object",
                    "null"
                  ]
                },
                "type": [
                  "array",
                  "null"
                ]
              },
              "resourceStatus": {
                "description": "ResourceStatus represents the status of each resource in manifestwork deployed on a managed cluster. The Klusterlet agent on managed cluster syncs the condition from the managed cluster to the hub.",
                "properties": {
                  "manifests": {
                    "description": "Manifests represents the condition of manifests deployed on managed cluster. Valid condition types are: 1. Progressing represents the resource is being applied on managed cluster. 2. Applied represents the resource is applied successfully on managed cluster. 3. Available represents the resource exists on the managed cluster. 4. Degraded represents the current state of resource does not match the desired state for a certain period.",
                    "items": {
                      "description": "ManifestCondition represents the conditions of the resources deployed on a managed cluster.",
                      "properties": {
                        "conditions": {
                          "description": "Conditions represents the conditions of this resource on a managed cluster.",
                          "items": {
                            "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }",
                            "properties": {
                              "lastTransitionTime": {
                                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "message": {
                                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                                "maxLength": 32768,
                                "type": "string"
                              },
                              "observedGeneration": {
                                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                                "format": "int64",
                                "minimum": 0,
                                "type": [
                                  "integer",
                                  "null"
                                ]
                              },
                              "reason": {
                                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                                "maxLength": 1024,
                                "minLength": 1,
                                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                                "type": "string"
                              },
                              "status": {
                                "description": "status of the condition, one of True, False, Unknown.",
                                "enum": [
                                  "True",
                                  "False",
                                  "Unknown"
                                ],
                                "type": "string"
                              },
                              "type": {
                                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                                "maxLength": 316,
                                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                                "type": "string"
                              }
                            },
                            "required": [
                              "lastTransitionTime",
                              "message",
                              "reason",
                              "status",
                              "type"
                            ],
                            "type": [
                              "object",
                              "null"
                            ]
                          },
                          "type": [
                            "array",
                            "null"
                          ]
                        },
                        "resourceMeta": {
                          "description": "ResourceMeta represents the group, version, kind, name and namespace of a resoure.",
                          "properties": {
                            "group": {
                              "description": "Group is the API Group of the Kubernetes resource.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "kind": {
                              "description": "Kind is the kind of the Kubernetes resource.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "name": {
                              "description": "Name is the name of the Kubernetes resource.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "namespace": {
                              "description": "Name is the namespace of the Kubernetes resource.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "ordinal": {
                              "description": "Ordinal represents the index of the manifest on spec.",
                              "format": "int32",
                              "type": [
                                "integer",
                                "null"
                              ]
                            },
                            "resource": {
                              "description": "Resource is the resource name of the Kubernetes resource.",
                              "type": [
                                "string",
                                "null"
                              ]
                            },
                            "version": {
                              "description": "Version is the version of the Kubernetes resource.",
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          },
                          "type": [
                            "object",
                            "null"
                          ]
                        },
                        "statusFeedback": {
                          "description": "StatusFeedback represents the values of the feild synced back defined in statusFeedbacks",
                          "properties": {
                            "values": {
                              "description": "Values represents the synced value of the interested field.",
                              "items": {
                                "properties": {
                                  "fieldValue": {
                                    "description": "Value is the value of the status field. The value of the status field can only be integer, string or boolean.",
                                    "properties": {
                                      "boolean": {
                                        "description": "Boolean is bool value when type is boolean.",
                                        "type": [
                                          "boolean",
                                          "null"
                                        ]
                                      },
                                      "integer": {
                                        "description": "Integer is the integer value when type is integer.",
                                        "format": "int64",
                                        "type": [
                                          "integer",
                                          "null"
                                        ]
                                      },
                                      "string": {
                                        "description": "String is the string value when when type is string.",
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "type": {
                                        "description": "Type represents the type of the value, it can be integer, string or boolean.",
                                        "enum": [
                                          "Integer",
                                          "String",
                                          "Boolean"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "name": {
                                    "description": "Name represents the alias name for this field. It is the same as what is specified in StatuFeedbackRule in the spec.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "fieldValue",
                                  "name"
                                ],
                                "type": [
                                  "object",
                                  "null"
                                ]
                              },
                              "type": [
                                "array",
                                "null"
                              ],
                              "x-kubernetes-list-map-keys": [
                                "name"
                              ],
                              "x-kubernetes-list-type": "map"
                            }
                          },
                          "type": [
                            "object",
                            "null"
                          ]
                        }
                      },
                      "type": [
                        "object",
                        "null"
                      ]
                    },
                    "type": [
                      "array",
                      "null"
                    ]
                  }
                },
                "type": [
                  "object",
                  "null"
                ]
              }
            },
            "type": [
              "object",
              "null"
            ]
          }
        },
        "type": [
          "object",
          "null"
        ],
        "x-kubernetes-group-version-kind": [
          {
            "group": "work.open-cluster-management.io",
            "kind": "ManifestWork",
            "version": "v1"
          }
        ]
      },
      "type": [
        "array",
        "null"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "ManifestWorkList"
      ]
    },
    "metadata": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type": [
            "string",
            "null"
          ]
        },
        "remainingItemCount": {
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
          "format": "int64",
          "type": [
            "integer",
            "null"
          ]
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": [
            "string",
            "null"
          ]
        },
        "selfLink": {
          "description": "selfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "type": [
        "object",
        "null"
      ]
    }
  },
  "required": [
    "items"
  ],
  "x-kubernetes-group-version-kind": [
    {
      "group": "work.open-cluster-management.io",
      "kind": "ManifestWorkList",
      "version": "v1"
    }
  ],
  "$schema": "http://json-schema.org/schema#",
  "type": "object"
}