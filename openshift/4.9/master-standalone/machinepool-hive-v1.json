{
  "description": "MachinePool is the Schema for the machinepools API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "hive.openshift.io/v1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "MachinePool"
      ]
    },
    "metadata": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
          "type": [
            "string",
            "null"
          ]
        },
        "creationTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "deletionTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": [
            "string",
            "null"
          ],
          "format": "date-time"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "string",
              "null"
            ]
          },
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": [
            "string",
            "null"
          ]
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "fieldsType": {
                "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                "type": [
                  "string",
                  "null"
                ]
              },
              "fieldsV1": {
                "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                "type": [
                  "object",
                  "null"
                ]
              },
              "manager": {
                "description": "Manager is an identifier of the workflow managing these fields.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "operation": {
                "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "subresource": {
                "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "time": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              }
            }
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": [
            "string",
            "null"
          ]
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": [
            "string",
            "null"
          ]
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "apiVersion",
              "kind",
              "name",
              "uid"
            ],
            "properties": {
              "apiVersion": {
                "description": "API version of the referent.",
                "type": "string"
              },
              "blockOwnerDeletion": {
                "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "controller": {
                "description": "If true, this reference points to the managing controller.",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "kind": {
                "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "name": {
                "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                "type": "string"
              },
              "uid": {
                "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                "type": "string"
              }
            },
            "x-kubernetes-map-type": "atomic"
          },
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": [
            "string",
            "null"
          ]
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": [
            "string",
            "null"
          ]
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "spec": {
      "description": "MachinePoolSpec defines the desired state of MachinePool",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "clusterDeploymentRef",
        "name",
        "platform"
      ],
      "properties": {
        "autoscaling": {
          "description": "Autoscaling is the details for auto-scaling the machine pool. Replicas and autoscaling cannot be used together.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "maxReplicas",
            "minReplicas"
          ],
          "properties": {
            "maxReplicas": {
              "description": "MaxReplicas is the maximum number of replicas for the machine pool.",
              "type": "integer",
              "format": "int32"
            },
            "minReplicas": {
              "description": "MinReplicas is the minimum number of replicas for the machine pool.",
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "clusterDeploymentRef": {
          "description": "ClusterDeploymentRef references the cluster deployment to which this machine pool belongs.",
          "type": "object",
          "properties": {
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
              "type": [
                "string",
                "null"
              ]
            }
          }
        },
        "labels": {
          "description": "Map of label string keys and values that will be applied to the created MachineSet's MachineSpec. This list will overwrite any modifications made to Node labels on an ongoing basis.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "name": {
          "description": "Name is the name of the machine pool.",
          "type": "string"
        },
        "platform": {
          "description": "Platform is configuration for machine pool specific to the platform.",
          "type": "object",
          "properties": {
            "aws": {
              "description": "AWS is the configuration used when installing on AWS.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "rootVolume",
                "type"
              ],
              "properties": {
                "rootVolume": {
                  "description": "EC2RootVolume defines the storage for ec2 instance.",
                  "type": "object",
                  "required": [
                    "iops",
                    "size",
                    "type"
                  ],
                  "properties": {
                    "iops": {
                      "description": "IOPS defines the iops for the storage.",
                      "type": "integer"
                    },
                    "kmsKeyARN": {
                      "description": "The KMS key that will be used to encrypt the EBS volume. If no key is provided the default KMS key for the account will be used. https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetEbsDefaultKmsKeyId.html",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "size": {
                      "description": "Size defines the size of the storage.",
                      "type": "integer"
                    },
                    "type": {
                      "description": "Type defines the type of the storage.",
                      "type": "string"
                    }
                  }
                },
                "spotMarketOptions": {
                  "description": "SpotMarketOptions allows users to configure instances to be run using AWS Spot instances.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "maxPrice": {
                      "description": "The maximum price the user is willing to pay for their instances Default: On-Demand price",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  }
                },
                "subnets": {
                  "description": "Subnets is the list of subnets to which to attach the machines. There must be exactly one private subnet for each availability zone used. If public subnets are specified, there must be exactly one private and one public subnet specified for each availability zone.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "type": {
                  "description": "InstanceType defines the ec2 instance type. eg. m4-large",
                  "type": "string"
                },
                "zones": {
                  "description": "Zones is list of availability zones that can be used.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            },
            "azure": {
              "description": "Azure is the configuration used when installing on Azure.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "osDisk",
                "type"
              ],
              "properties": {
                "osDisk": {
                  "description": "OSDisk defines the storage for instance.",
                  "type": "object",
                  "required": [
                    "diskSizeGB"
                  ],
                  "properties": {
                    "diskSizeGB": {
                      "description": "DiskSizeGB defines the size of disk in GB.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                },
                "type": {
                  "description": "InstanceType defines the azure instance type. eg. Standard_DS_V2",
                  "type": "string"
                },
                "zones": {
                  "description": "Zones is list of availability zones that can be used. eg. [\"1\", \"2\", \"3\"]",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            },
            "gcp": {
              "description": "GCP is the configuration used when installing on GCP.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "type"
              ],
              "properties": {
                "osDisk": {
                  "description": "OSDisk defines the storage for instances.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "diskSizeGB": {
                      "description": "DiskSizeGB defines the size of disk in GB. Defaulted internally to 128.",
                      "type": [
                        "integer",
                        "null"
                      ],
                      "format": "int64",
                      "maximum": 65536,
                      "minimum": 16
                    },
                    "diskType": {
                      "description": "DiskType defines the type of disk. The valid values are pd-standard and pd-ssd. Defaulted internally to pd-ssd.",
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "pd-ssd",
                        "pd-standard"
                      ]
                    },
                    "encryptionKey": {
                      "description": "EncryptionKey defines the KMS key to be used to encrypt the disk.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "kmsKey": {
                          "description": "KMSKey is a reference to a KMS Key to use for the encryption.",
                          "type": [
                            "object",
                            "null"
                          ],
                          "required": [
                            "keyRing",
                            "location",
                            "name"
                          ],
                          "properties": {
                            "keyRing": {
                              "description": "KeyRing is the name of the KMS Key Ring which the KMS Key belongs to.",
                              "type": "string"
                            },
                            "location": {
                              "description": "Location is the GCP location in which the Key Ring exists.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name is the name of the customer managed encryption key to be used for the disk encryption.",
                              "type": "string"
                            },
                            "projectID": {
                              "description": "ProjectID is the ID of the Project in which the KMS Key Ring exists. Defaults to the VM ProjectID if not set.",
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          }
                        },
                        "kmsKeyServiceAccount": {
                          "description": "KMSKeyServiceAccount is the service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used. See https://cloud.google.com/compute/docs/access/service-accounts#compute_engine_service_account for details on the default service account.",
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      }
                    }
                  }
                },
                "type": {
                  "description": "InstanceType defines the GCP instance type. eg. n1-standard-4",
                  "type": "string"
                },
                "zones": {
                  "description": "Zones is list of availability zones that can be used.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            },
            "openstack": {
              "description": "OpenStack is the configuration used when installing on OpenStack.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "flavor"
              ],
              "properties": {
                "flavor": {
                  "description": "Flavor defines the OpenStack Nova flavor. eg. m1.large The json key here differs from the installer which uses both \"computeFlavor\" and type \"type\" depending on which type you're looking at, and the resulting field on the MachineSet is \"flavor\". We are opting to stay consistent with the end result.",
                  "type": "string"
                },
                "rootVolume": {
                  "description": "RootVolume defines the root volume for instances in the machine pool. The instances use ephemeral disks if not set.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "size",
                    "type"
                  ],
                  "properties": {
                    "size": {
                      "description": "Size defines the size of the volume in gibibytes (GiB). Required",
                      "type": "integer"
                    },
                    "type": {
                      "description": "Type defines the type of the volume. Required",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "ovirt": {
              "description": "Ovirt is the configuration used when installing on oVirt.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "cpu": {
                  "description": "CPU defines the VM CPU.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "cores",
                    "sockets"
                  ],
                  "properties": {
                    "cores": {
                      "description": "Cores is the number of cores per socket. Total CPUs is (Sockets * Cores)",
                      "type": "integer",
                      "format": "int32"
                    },
                    "sockets": {
                      "description": "Sockets is the number of sockets for a VM. Total CPUs is (Sockets * Cores)",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                },
                "memoryMB": {
                  "description": "MemoryMB is the size of a VM's memory in MiBs.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32"
                },
                "osDisk": {
                  "description": "OSDisk is the the root disk of the node.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "sizeGB"
                  ],
                  "properties": {
                    "sizeGB": {
                      "description": "SizeGB size of the bootable disk in GiB.",
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                },
                "vmType": {
                  "description": "VMType defines the workload type of the VM.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "enum": [
                    "",
                    "desktop",
                    "server",
                    "high_performance"
                  ]
                }
              }
            },
            "vsphere": {
              "description": "VSphere is the configuration used when installing on vSphere",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "coresPerSocket",
                "cpus",
                "memoryMB",
                "osDisk"
              ],
              "properties": {
                "coresPerSocket": {
                  "description": "NumCoresPerSocket is the number of cores per socket in a vm. The number of vCPUs on the vm will be NumCPUs/NumCoresPerSocket.",
                  "type": "integer",
                  "format": "int32"
                },
                "cpus": {
                  "description": "NumCPUs is the total number of virtual processor cores to assign a vm.",
                  "type": "integer",
                  "format": "int32"
                },
                "memoryMB": {
                  "description": "Memory is the size of a VM's memory in MB.",
                  "type": "integer",
                  "format": "int64"
                },
                "osDisk": {
                  "description": "OSDisk defines the storage for instance.",
                  "type": "object",
                  "required": [
                    "diskSizeGB"
                  ],
                  "properties": {
                    "diskSizeGB": {
                      "description": "DiskSizeGB defines the size of disk in GB.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          }
        },
        "replicas": {
          "description": "Replicas is the count of machines for this machine pool. Replicas and autoscaling cannot be used together. Default is 1, if autoscaling is not used.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "taints": {
          "description": "List of taints that will be applied to the created MachineSet's MachineSpec. This list will overwrite any modifications made to Node taints on an ongoing basis.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "effect",
              "key"
            ],
            "properties": {
              "effect": {
                "description": "Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.",
                "type": "string"
              },
              "key": {
                "description": "Required. The taint key to be applied to a node.",
                "type": "string"
              },
              "timeAdded": {
                "description": "TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "value": {
                "description": "The taint value corresponding to the taint key.",
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          }
        }
      }
    },
    "status": {
      "description": "MachinePoolStatus defines the observed state of MachinePool",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions includes more detailed status for the cluster deployment",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "MachinePoolCondition contains details for the current condition of a machine pool",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "status",
              "type"
            ],
            "properties": {
              "lastProbeTime": {
                "description": "LastProbeTime is the last time we probed the condition.",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time the condition transitioned from one status to another.",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "message": {
                "description": "Message is a human-readable message indicating details about last transition.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "reason": {
                "description": "Reason is a unique, one-word, CamelCase reason for the condition's last transition.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "status": {
                "description": "Status is the status of the condition.",
                "type": "string"
              },
              "type": {
                "description": "Type is the type of the condition.",
                "type": "string"
              }
            }
          }
        },
        "machineSets": {
          "description": "MachineSets is the status of the machine sets for the machine pool on the remote cluster.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "MachineSetStatus is the status of a machineset in the remote cluster.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "maxReplicas",
              "minReplicas",
              "name",
              "replicas"
            ],
            "properties": {
              "errorMessage": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "errorReason": {
                "description": "In the event that there is a terminal problem reconciling the replicas, both ErrorReason and ErrorMessage will be set. ErrorReason will be populated with a succinct value suitable for machine interpretation, while ErrorMessage will contain a more verbose string suitable for logging and human consumption.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "maxReplicas": {
                "description": "MaxReplicas is the maximum number of replicas for the machine set.",
                "type": "integer",
                "format": "int32"
              },
              "minReplicas": {
                "description": "MinReplicas is the minimum number of replicas for the machine set.",
                "type": "integer",
                "format": "int32"
              },
              "name": {
                "description": "Name is the name of the machine set.",
                "type": "string"
              },
              "readyReplicas": {
                "description": "The number of ready replicas for this MachineSet. A machine is considered ready when the node has been created and is \"Ready\". It is transferred as-is from the MachineSet from remote cluster.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int32"
              },
              "replicas": {
                "description": "Replicas is the current number of replicas for the machine set.",
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "replicas": {
          "description": "Replicas is the current number of replicas for the machine pool.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "hive.openshift.io",
      "kind": "MachinePool",
      "version": "v1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}